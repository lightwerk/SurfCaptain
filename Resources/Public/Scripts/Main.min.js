"use strict";angular.module("surfCaptain",["ngRoute","xeditable","ngAnimate","ngMessages"]).config(["$routeProvider",function($routeProvider){var templatePath="/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/";$routeProvider.when("/",{templateUrl:templatePath+"Projects.html",controller:"ProjectsController"}).when("/project/:projectName",{templateUrl:templatePath+"Project.html",controller:"ProjectController"}).when("/project/:projectName/deploy",{templateUrl:templatePath+"Deploy.html",controller:"DeployController"}).when("/project/:projectName/sync",{templateUrl:templatePath+"Sync.html",controller:"SyncController"}).when("/project/:projectName/server",{templateUrl:templatePath+"Server.html",controller:"ServerController"}).when("/about",{templateUrl:templatePath+"About.html",controller:"AboutController"}).when("/server",{templateUrl:templatePath+"GlobalServer.html",controller:"GlobalServerController"}).when("/extensions",{templateUrl:templatePath+"Extensions.html",controller:"ExtensionsController"}).when("/deployments",{templateUrl:templatePath+"Deployments.html",controller:"DeploymentsController"}).when("/deployments/:deploymentId",{templateUrl:templatePath+"SingleDeployment.html",controller:"SingleDeploymentController"}).otherwise({redirectTo:"/"})}]).value("version","0.10_beta1").constant("SEVERITY",{ok:0,info:1,warning:2,error:3}).constant("CONFIG",{applicationTypes:{deployTYPO3:"TYPO3\\CMS\\Deploy",syncTYPO3:"TYPO3\\CMS\\Shared"}}),angular.module("surfCaptain").run(["editableOptions",function(editableOptions){editableOptions.theme="bs3"}]),angular.module("surfCaptain").controller("AboutController",["$scope",function($scope){$scope.techs=[{name:"angular",url:"https://angularjs.org/",description:{headline:"AngularJS",span1:"JavaScript",span2:"Framework"}},{name:"flow",url:"http://flow.typo3.org/",description:{headline:"TYPO3 FLOW",span1:"PHP-Application",span2:"Framework"}},{name:"bootstrap",url:"http://getbootstrap.com/",description:{headline:"Bootstrap",span1:"CSS",span2:"Framework"}}],$scope.subtechs=[{name:"grunt",url:"http://gruntjs.com/",description:{headline:"Grunt"}},{name:"bower",url:"http://bower.io/",description:{headline:"Bower"}},{name:"composer",url:"https://getcomposer.org/",description:{headline:"Composer"}},{name:"karma",url:"http://karma-runner.github.io",description:{headline:"Karma"}},{name:"jasmine",url:"http://jasmine.github.io/",description:{headline:"Jasmine"}},{name:"jquery",url:"http://jquery.com/",description:{headline:"jQuery"}},{name:"css3",url:"http://en.wikipedia.org/wiki/Cascading_Style_Sheets#CSS_3",description:{headline:"CSS 3"}},{name:"git",url:"http://git-scm.com/",description:{headline:"git"}},{name:"html5",url:"http://en.wikipedia.org/wiki/HTML5",description:{headline:"HTML 5"}},{name:"mysql",url:"http://www.mysql.com/",description:{headline:"MySQL"}},{name:"less",url:"http://www.lesscss.de/",description:{headline:"LESS"}}]}]),angular.module("surfCaptain").controller("AbstractSingleProjectController",["$scope","$routeParams","ProjectRepository",function($scope,$routeParams,ProjectRepository){$scope.name=$routeParams.projectName,$scope.project={},$scope.messages={},this.init=function(){ProjectRepository.getProjects().then(function(projects){$scope.project=ProjectRepository.getProjectByName($scope.name,projects)})},this.init()}]),angular.module("surfCaptain").controller("DeployController",["$scope","$controller","ProjectRepository","SEVERITY","FlashMessageService","CONFIG","DeploymentRepository","$location","PresetRepository","ValidationService","SettingsRepository","PresetService","UtilityService",function($scope,$controller,ProjectRepository,SEVERITY,FlashMessageService,CONFIG,DeploymentRepository,$location,PresetRepository,ValidationService,SettingsRepository,PresetService,UtilityService){var loadingString="loading ...",self=this;angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope})),$scope.deployableCommits=[{name:loadingString,group:"Tags"},{name:loadingString,group:"Branches"}],$scope.servers=[],$scope.error=!1,$scope.finished=!1,$scope.currentPreset={},$scope.tags=[],this.addFailureFlashMessage=function(){$scope.finished=!0,$scope.messages=FlashMessageService.addFlashMessage("Request failed!","API call failed. Deployment not possible.",SEVERITY.error,"deployment-project-call-failed")},$scope.setCurrentPreset=function(preset){$scope.currentPreset=preset,angular.isDefined($scope.selectedCommit)&&""!==$scope.selectedCommit&&$scope.setCommitInCurrentPreset()},$scope.deploy=function(preset){preset===$scope.currentPreset&&($scope.currentPreset.applications[0].type=CONFIG.applicationTypes.deployTYPO3,angular.isDefined($scope.currentPreset.applications[0].options.deploymentPathWithMarkers)&&delete $scope.currentPreset.applications[0].options.deploymentPathWithMarkers,(angular.isUndefined($scope.currentPreset.applications[0].options.repositoryUrl)||""===$scope.currentPreset.applications[0].options.repositoryUrl)&&($scope.currentPreset.applications[0].options.repositoryUrl=$scope.project.repositoryUrl),DeploymentRepository.addDeployment($scope.currentPreset).then(function(response){$scope.messages=FlashMessageService.addFlashMessage("OK!",$scope.currentCommit.type+" "+$scope.currentCommit.name+" will be shortly deployed onto "+$scope.currentPreset.applications[0].nodes[0].name+"! You can cancel the deployment while it is still waiting.",SEVERITY.ok),$location.path("deployments/"+response.deployment.__identity)},function(){$scope.messages=FlashMessageService.addFlashMessage("Error!","Deployment configuration could not be submitted successfully. Try again later.",SEVERITY.error)}))},$scope.setCommitInCurrentPreset=function(){var commit=$scope.deployableCommits.filter(function(commit){return commit.identifier===$scope.selectedCommit});if(angular.isUndefined(commit[0])||null===commit||commit.length>1)return FlashMessageService.addFlashMessage("Error","Something went wrong with the chosen Commit",SEVERITY.error),void($scope.error=!0);switch($scope.currentCommit=commit[0],$scope.currentCommit.type){case"Branch":delete $scope.currentPreset.applications[0].options.tag,$scope.currentPreset.applications[0].options.branch=$scope.currentCommit.name;break;case"Tag":delete $scope.currentPreset.applications[0].options.branch,$scope.currentPreset.applications[0].options.tag=$scope.currentCommit.name;break;default:return FlashMessageService.addFlashMessage("Error","Something went wrong with the chosen Commit",SEVERITY.error),$scope.error=!0,void($scope.currentCommit=null)}},$scope.presetDisplay=function(preset){return angular.isUndefined($scope.currentPreset.applications)?!0:$scope.currentPreset===preset},$scope.unsetLoadingKeyForGroup=function(group){var key;for(key in $scope.deployableCommits)if($scope.deployableCommits.hasOwnProperty(key)&&angular.isDefined($scope.deployableCommits[key].name)&&angular.isDefined($scope.deployableCommits[key].group)&&$scope.deployableCommits[key].name===loadingString&&$scope.deployableCommits[key].group===group){$scope.deployableCommits.splice(key,1);break}},$scope.getRootContext=function(context){return PresetService.getRootContext(context,$scope.contexts)},$scope.getDeployedTag=function(name){return UtilityService.getDeployedTag(name,$scope.tags)},$scope.$watch("project",function(project){angular.isUndefined(project.repositoryUrl)||(ProjectRepository.getFullProjectByRepositoryUrl(project.repositoryUrl).then(function(response){var property,presets=response.repository.presets;$scope.repositoryUrl=response.repository.webUrl,$scope.tags=response.repository.tags,$scope.deployableCommits=response.repository.tags,jQuery.merge($scope.deployableCommits,response.repository.branches);for(property in presets)presets.hasOwnProperty(property)&&(angular.isUndefined(presets[property].applications[0].type)||presets[property].applications[0].type===CONFIG.applicationTypes.deployTYPO3)&&$scope.servers.push(presets[property]);$scope.finished=!0,0===$scope.servers.length&&($scope.messages=FlashMessageService.addFlashMessage("No Servers yet!",'FYI: There are no servers for project <span class="uppercase">'+$scope.name+"</span> yet. Why dont you create one, hmm?",SEVERITY.info,$scope.name+"-no-servers"))},function(){self.addFailureFlashMessage()}),PresetRepository.getGlobalServers("").then(function(response){$scope.globalServers=response.presets},function(){self.addFailureFlashMessage()}),SettingsRepository.getSettings().then(function(response){$scope.contexts=[],angular.isDefined(response.contexts)&&($scope.contexts=response.contexts.split(","))}))})}]),angular.module("surfCaptain").controller("DeploymentsController",["$scope","DeploymentRepository","FlashMessageService","SEVERITY",function($scope,DeploymentRepository,FlashMessageService,SEVERITY){var self=this;this.setDeployments=function(deployments){$scope.deployments=deployments},this.init=function(){DeploymentRepository.getAllDeployments().then(function(response){$scope.finished=!0,self.setDeployments(response.deployments)},function(){$scope.finished=!0,FlashMessageService.addFlashMessage("Error!","The API call failed. Please try again later.",SEVERITY.error,"deployment-list-no-response")})},this.init(),$scope.deployments=[],$scope.finished=!1}]),angular.module("surfCaptain").controller("ExtensionsController",["$scope","$controller",function(){}]),angular.module("surfCaptain").controller("GlobalServerController",["$scope","PresetRepository","PresetService","FlashMessageService","SEVERITY","SettingsRepository",function($scope,PresetRepository,PresetService,FlashMessageService,SEVERITY,SettingsRepository){var self=this;$scope.newPreset=PresetService.getNewPreset(),$scope.finished=!1,$scope.messages=[],$scope.serverNames=[],this.setServerNames=function(){var property;for(property in $scope.servers)$scope.servers.hasOwnProperty(property)&&$scope.serverNames.push(property)},this.getSettings=function(){SettingsRepository.getSettings().then(function(response){$scope.contexts="",angular.isDefined(response.contexts)&&($scope.contexts=response.contexts.split(","))})},$scope.getAllServers=function(){PresetRepository.getGlobalServers("").then(function(response){$scope.finished=!0,$scope.servers=response.presets,self.setServerNames(),0===$scope.servers.length&&($scope.messages=FlashMessageService.addFlashMessage("FYI!","There are no servers yet. Why dont you create one, hmm?",SEVERITY.info,"global-server-request-no-results"))},function(){$scope.finished=!0,$scope.messages=FlashMessageService.addFlashMessage("Request failed!","The global servers could not be received. Please try again later..",SEVERITY.error,"global-server-request-failed")})},$scope.addServer=function(server){$scope.finished=!1,PresetRepository.addServer(server).then(function(){$scope.newPreset=PresetService.getNewPreset(),$scope.newServerForm.$setPristine(),$scope.getAllServers(),$scope.messages=FlashMessageService.addFlashMessage("Server created!","The Server "+server.nodes[0].name+" was successfully created.",SEVERITY.ok)},function(){$scope.finished=!0,$scope.messages=FlashMessageService.addFlashMessage("Creation failed!",'The Server "'+server.nodes[0].name+'" could not be created.',SEVERITY.error)})},this.init=function(){self.getSettings(),$scope.getAllServers()},this.init()}]),angular.module("surfCaptain").controller("ProjectController",["$scope","$controller","FlashMessageService","ProjectRepository","SEVERITY","PresetService","SettingsRepository","UtilityService",function($scope,$controller,FlashMessageService,ProjectRepository,SEVERITY,PresetService,SettingsRepository,UtilityService){angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope})),$scope.ordering="date",$scope.finished=!1,$scope.tags=[],$scope.getRootContext=function(context){return PresetService.getRootContext(context,$scope.contexts)},$scope.getDeployedTag=function(name){return UtilityService.getDeployedTag(name,$scope.tags)},$scope.$watch("project",function(project){angular.isUndefined(project.repositoryUrl)||(ProjectRepository.getFullProjectByRepositoryUrl(project.repositoryUrl).then(function(response){$scope.finished=!0,$scope.deployments=response.repository.deployments,$scope.presets=response.repository.presets,$scope.tags=response.repository.tags},function(){$scope.finished=!0}),SettingsRepository.getSettings().then(function(response){$scope.contexts=[],angular.isDefined(response.contexts)&&($scope.contexts=response.contexts.split(","))}))})}]),angular.module("surfCaptain").controller("ProjectsController",["$scope","ProjectRepository","SettingsRepository","SEVERITY","FlashMessageService",function($scope,ProjectRepository,SettingsRepository,SEVERITY,FlashMessageService){$scope.settings={},$scope.ordering="name",$scope.projects=[],$scope.finished=!1,this.init=function(){ProjectRepository.getProjects().then(function(response){$scope.finished=!0,$scope.projects=response},function(){$scope.finished=!0,$scope.messages=FlashMessageService.addFlashMessage("Error!","API call failed. GitLab is currently not available.",SEVERITY.error,"projects-loaded-error")}),SettingsRepository.getSettings().then(function(response){$scope.settings=response})},this.init()}]),angular.module("surfCaptain").controller("ServerController",["$scope","$controller","PresetRepository","ValidationService","SettingsRepository","MarkerService","PresetService","FlashMessageService","SEVERITY","ProjectRepository",function($scope,$controller,PresetRepository,ValidationService,SettingsRepository,MarkerService,PresetService,FlashMessageService,SEVERITY,ProjectRepository){function ServerControllerException(message){this.name="ServerControllerException",this.message=message}var self=this;angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope})),ServerControllerException.prototype=new Error,ServerControllerException.prototype.constructor=ServerControllerException,$scope.finished=!1,$scope.currentPreset={},$scope.messages=[],$scope.serverNames=[],this.setServerNames=function(){var property;$scope.serverNames=[];for(property in $scope.servers)$scope.servers.hasOwnProperty(property)&&$scope.serverNames.push(property)},this.setTakenServerNamesAsUnavailableSuggestions=function(){var numberOfNameSuggestions,serverName,i=0;if($scope.serverNames.length)for(numberOfNameSuggestions=$scope.nameSuggestions.length,i;numberOfNameSuggestions>i;i++)serverName=$scope.generateServerName($scope.nameSuggestions[i].suffix),$scope.nameSuggestions[i].available=!ValidationService.doesArrayContainItem($scope.serverNames,serverName)},this.generateNameSuggestions=function(nameSuggestions){var nameSuggestion,item;$scope.nameSuggestions=[];for(nameSuggestion in nameSuggestions)nameSuggestions.hasOwnProperty(nameSuggestion)&&(item={suffix:nameSuggestion,available:!0,context:nameSuggestions[nameSuggestion]},$scope.nameSuggestions.push(item))},this.handleSettings=function(){var docRoot;angular.isUndefined($scope.settings)||($scope.contexts="",angular.isDefined($scope.settings.contexts)&&($scope.contexts=$scope.settings.contexts.split(",")),angular.isDefined($scope.settings.nameSuggestions)&&self.generateNameSuggestions($scope.settings.nameSuggestions),angular.isDefined($scope.settings.defaultDeploymentPath)&&(docRoot=$scope.settings.defaultDeploymentPath,ValidationService.doesStringContainSubstring(docRoot,"{{")&&(docRoot=MarkerService.replaceMarkers(docRoot,$scope.project)),ValidationService.doesStringContainSubstring(docRoot,"{{")?($scope.newPreset.options.deploymentPath=MarkerService.getStringBeforeFirstMarker(docRoot),$scope.newPreset.options.deploymentPathWithMarkers=docRoot):$scope.newPreset.options.deploymentPath=docRoot))},this.successCallback=function(response){$scope.finished=!0,$scope.servers=response.repository.presets,self.setServerNames(),angular.isDefined($scope.nameSuggestions)&&self.setTakenServerNamesAsUnavailableSuggestions(),0===$scope.servers.length&&($scope.messages=FlashMessageService.addFlashMessage("No Servers yet!",'FYI: There are no servers for project <span class="uppercase">'+$scope.name+"</span> yet. Why dont you create one, hmm?",SEVERITY.info,$scope.name+"-no-servers"))},this.failureCallback=function(){$scope.finished=!0,$scope.messages=FlashMessageService.addFlashMessage("Request failed!","The servers could not be received. Please try again later..",SEVERITY.error,"server-request-failed")},$scope.getAllServers=function(cache){$scope.newPreset.options.repositoryUrl=$scope.project.repositoryUrl,cache===!1?ProjectRepository.getFullProjectByRepositoryUrlFromServer($scope.project.repositoryUrl).then(self.successCallback,self.failureCallback):ProjectRepository.getFullProjectByRepositoryUrl($scope.project.repositoryUrl).then(self.successCallback,self.failureCallback)},$scope.setDeploymentPath=function(suffix){var docRoot;angular.isDefined($scope.newPreset.options.deploymentPathWithMarkers)&&(docRoot=MarkerService.replaceMarkers($scope.newPreset.options.deploymentPathWithMarkers,{suffix:suffix}),$scope.newPreset.options.deploymentPath=docRoot)},$scope.addServer=function(server){$scope.finished=!1,angular.isDefined(server.options.deploymentPathWithMarkers)&&delete server.options.deploymentPathWithMarkers,PresetRepository.addServer(server).then(function(){$scope.newPreset=PresetService.getNewPreset($scope.settings),$scope.newServerForm.$setPristine(),self.handleSettings(),$scope.getAllServers(!1),$scope.messages=FlashMessageService.addFlashMessage("Server created!",'The Server "'+server.nodes[0].name+'" was successfully created.',SEVERITY.ok)},function(){$scope.finished=!0,$scope.messages=FlashMessageService.addFlashMessage("Creation failed!",'The Server "'+server.nodes[0].name+'" could not be created.',SEVERITY.error)})},$scope.generateServerName=function(suffix){if(angular.isUndefined($scope.project))throw new ServerControllerException("No project given.");if(angular.isUndefined($scope.project.name))throw new ServerControllerException("Project got no name.");return $scope.project.name+"-"+suffix},$scope.$watch("project",function(newValue){angular.isDefined(newValue.name)&&SettingsRepository.getSettings().then(function(response){$scope.settings=response,$scope.newPreset=PresetService.getNewPreset($scope.settings),self.handleSettings(),$scope.getAllServers()},function(){$scope.newPreset=PresetService.getNewPreset(),$scope.getAllServers()})})}]),angular.module("surfCaptain").controller("SingleDeploymentController",["$scope","DeploymentRepository","$routeParams","$cacheFactory","$location","$anchorScroll","FlashMessageService","SEVERITY",function($scope,DeploymentRepository,$routeParams,$cacheFactory,$location,$anchorScroll,FlashMessageService,SEVERITY){var self=this;this.initLiveLog=function(){if(!$scope.noLog)switch($scope.deployment.status){case"success":case"failed":case"cancelled":return angular.isUndefined($cacheFactory.get("deploymentCache"))&&$cacheFactory("deploymentCache"),void $cacheFactory.get("deploymentCache").put($scope.deployment.__identity,$scope.deployment);case"waiting":case"running":setTimeout(self.getDeployment,1e3);break;default:return}},this.getDeployment=function(){self.scrollToNewLogEntries(),DeploymentRepository.getSingleDeployment($routeParams.deploymentId).then(function(response){$scope.finished=!0,$scope.deployment=response.deployment,self.initLiveLog()},function(){$scope.finished=!0,$scope.noLog=!0})},this.scrollToNewLogEntries=function(){angular.isUndefined($scope.deployment)||$scope.deployment.logs.length>$scope.logLength&&($anchorScroll(),$scope.logLength=$scope.deployment.logs.length)},this.init=function(){$location.hash("bottom"),this.getDeployment()},this.init(),$scope.cancelDeployment=function(){DeploymentRepository.cancelDeployment($routeParams.deploymentId).then(function(){self.getDeployment()})},$scope.deployConfigurationAgain=function(){DeploymentRepository.addDeployment($scope.deployment.configuration).then(function(response){$scope.messages=FlashMessageService.addFlashMessage("OK!",$scope.deployment.referenceName+" will be shortly deployed onto "+$scope.deployment.configuration.applications[0].nodes[0].name+"! You can cancel the deployment while it is still waiting.",SEVERITY.ok),$location.path("deployments/"+response.deployment.__identity)},function(){$scope.messages=FlashMessageService.addFlashMessage("Error!","Deployment configuration could not be submitted successfully. Try again later.",SEVERITY.error)})},$scope.finished=!1,$scope.noLog=!1,$scope.logLength=0}]),angular.module("surfCaptain").controller("SyncController",["$scope","$controller",function($scope,$controller){angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope}))}]),angular.module("surfCaptain").directive("chosen",function(){var linker=function(scope,element,attrs){var list=attrs.chosen;scope.$watchCollection(list,function(){element.trigger("liszt:updated"),element.trigger("chosen:updated")}),element.chosen({search_contains:!0})};return{restrict:"A",link:linker}}),angular.module("surfCaptain").directive("flashMessages",["SEVERITY","FlashMessageService",function(SEVERITY,FlashMessageService){var linker=function(scope,element,attrs){var getSeverityClass=function(severity){switch(severity){case SEVERITY.ok:return"ok";case SEVERITY.info:return"info";case SEVERITY.warning:return"warning";case SEVERITY.error:return"error";default:return"info"}},getTimeString=function(time){return time instanceof Date?"Time: "+time.getHours()+":"+time.getMinutes()+":"+time.getSeconds():""},generateFlashMessage=function(message,id){return'<div class="flash-message" id="'+id+'"><div class="flash-message-title '+getSeverityClass(message.severity)+'">'+message.title+'<span class="close" onclick="angular.element(this).parent().parent().remove()">&times;</span></div><div class="flash-message-message">'+message.message+'</div><div class="flash-message-footer"><span class="time">'+getTimeString(message.time)+"</span></div>"};scope.$watchCollection(attrs.messages,function(messages){var length,message,id,i=0,html="";if(angular.isDefined(messages)&&(length=messages.length)){for(i;length>i;i++)message=messages[i],id="",angular.isDefined(message.id)?(id=message.id,html+=angular.element("#"+id).length?"":generateFlashMessage(message,id)):html+=generateFlashMessage(message,id);angular.element(".flash-messages-container").append(html),FlashMessageService.flush()}})};return{restrict:"E",scope:{messages:"="},link:linker}}]),angular.module("surfCaptain").directive("lastCharacterValidate",["ValidationService",function(ValidationService){return{restrict:"A",require:"ngModel",scope:{character:"@character"},link:function(scope,elem,attr,ctrl){var character=scope.character||"";ctrl.$parsers.unshift(function(value){var valid=value?ValidationService.doesLastCharacterMatch(value.slice(-1),character):!1;return ctrl.$setValidity("last-character-validate",valid),valid?value:void 0}),ctrl.$formatters.unshift(function(value){var valid=value?ValidationService.doesLastCharacterMatch(value.slice(-1),character):!1;return ctrl.$setValidity("last-character-validate",valid),value})}}}]),angular.module("surfCaptain").directive("modal",function(){return{scope:{modal:"@modal"},link:function(scope,element){element.bind("click",function(){angular.element("."+scope.modal).modal()})}}}),angular.module("surfCaptain").directive("overlay",function(){var linker=function(){};return{restrict:"E",template:"<div data-ng-class=\"{false:'overlay'}[finished]\"></div>",scope:{finished:"="},link:linker}}),angular.module("surfCaptain").directive("serverList",["PresetRepository","ValidationService","FlashMessageService","SEVERITY","SettingsRepository","ProjectRepository",function(PresetRepository,ValidationService,FlashMessageService,SEVERITY,SettingsRepository,ProjectRepository){var linker=function(scope){scope.toggleSpinnerAndOverlay=function(){scope.finished=!scope.finished,scope.$parent.finished=!scope.$parent.finished},SettingsRepository.getSettings().then(function(response){scope.contexts="",angular.isDefined(response.contexts)&&(scope.contexts=response.contexts.split(","))}),scope.getRootContext=function(context){var i=0,length=scope.contexts.length;for(i;length>i;i++)if(ValidationService.doesStringStartWithSubstring(context,scope.contexts[i]))return scope.contexts[i];return""},scope.setCurrentPreset=function(preset){scope.currentPreset=preset},scope.deleteServer=function(server){scope.toggleSpinnerAndOverlay(),PresetRepository.deleteServer(server).then(function(){scope.$parent.getAllServers(!1),scope.messages=FlashMessageService.addFlashMessage("Server deleted!",'The Server "'+server.applications[0].nodes[0].name+'" was successfully removed.',SEVERITY.ok)},function(){scope.toggleSpinnerAndOverlay(),scope.messages=FlashMessageService.addFlashMessage("Deletion failed!",'The Server "'+server.applications[0].nodes[0].name+'" could not be removed.',SEVERITY.error)})},scope.updateServer=function(server){scope.toggleSpinnerAndOverlay(),PresetRepository.updateServer(server.applications[0]).then(function(){server.changed=!1,scope.toggleSpinnerAndOverlay(),angular.isDefined(scope.project)&&ProjectRepository.updateFullProjectInCache(scope.project.repositoryUrl),scope.messages=FlashMessageService.addFlashMessage("Update successful!",'The Server "'+server.applications[0].nodes[0].name+'" was updated successfully.',SEVERITY.ok)},function(){scope.toggleSpinnerAndOverlay(),scope.messages=FlashMessageService.addFlashMessage("Update failed!",'The Server "'+server.applications[0].nodes[0].name+'" could not be updated.',SEVERITY.error)})},scope.updateHost=function(data){return ValidationService.hasLength(data,1,"Host must not be empty!")},scope.updateDeploymentPath=function(data){var res=ValidationService.hasLength(data,1,"DeploymentPath is required!");return res===!0?ValidationService.doesLastCharacterMatch(data,"/",'DeploymentPath must end with "/"!'):res},scope.updateUsername=function(data){return ValidationService.hasLength(data,1,"User must not be empty!")},scope.updateContext=function(data){var i=0,length=scope.contexts.length;for(i;length>i;i++)if(ValidationService.doesStringStartWithSubstring(data,scope.contexts[i]))return!0;return"Context must start with either Development, Testing or Production!"}};return{restrict:"E",templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Partials/ServerList.html",scope:{servers:"=",getAllServers:"&",finished:"=",messages:"=",project:"="},link:linker}}]),angular.module("surfCaptain").directive("serverNameValidate",function(){return{restrict:"A",require:"ngModel",scope:{serverNames:"="},link:function(scope,elem,attr,ctrl){ctrl.$parsers.unshift(function(value){var valid=void 0===scope.serverNames||-1===scope.serverNames.indexOf(value);return ctrl.$setValidity("server-name-validate",valid),valid?value:void 0}),ctrl.$formatters.unshift(function(value){var valid=void 0===scope.serverNames||-1===scope.serverNames.indexOf(value);return ctrl.$setValidity("server-name-validate",valid),value})}}}),angular.module("surfCaptain").directive("spinner",function(){var linker=function(){};return{restrict:"E",template:'<i class="fa fa-spinner fa-spin fa-4x"></i>',link:linker}}),angular.module("surfCaptain").directive("startWithValidate",["ValidationService",function(ValidationService){return{restrict:"A",require:"ngModel",scope:{startWithValidate:"="},link:function(scope,elem,attr,ctrl){ctrl.$parsers.unshift(function(value){var length,i=0;if(angular.isUndefined(scope.startWithValidate))return ctrl.$setValidity("start-with-validate",!0),value;for(length=scope.startWithValidate.length,i;length>i;i++)if(ValidationService.doesStringStartWithSubstring(value,scope.startWithValidate[i]))return ctrl.$setValidity("start-with-validate",!0),value;return void ctrl.$setValidity("start-with-validate",!1)}),ctrl.$formatters.unshift(function(value){var length,i=0;if(angular.isUndefined(scope.startWithValidate))return ctrl.$setValidity("start-with-validate",!0),value;for(length=scope.startWithValidate.length,i;length>i;i++)if(ValidationService.doesStringStartWithSubstring(value,scope.startWithValidate[i]))return ctrl.$setValidity("start-with-validate",!0),value;return ctrl.$setValidity("start-with-validate",!1),value})}}}]),angular.module("surfCaptain").directive("surfcaptainHeader",["$routeParams","$location",function($routeParams,$location){return{restrict:"E",templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Partials/Header.html",scope:{icon:"@icon"},link:function(scope){var lastUrlPart=$location.path().split("/").pop();scope.project=$routeParams.itemName,scope.context=lastUrlPart===scope.project?"":lastUrlPart}}}]),angular.module("surfCaptain").directive("surfcaptainMenu",["$routeParams","$location",function($routeParams,$location){return{restrict:"E",templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Partials/Menu.html",scope:{},link:function(scope){var lastUrlPart=$location.path().split("/").pop();scope.project=$routeParams.projectName,scope.context=lastUrlPart===scope.project?"history":lastUrlPart}}}]),angular.module("surfCaptain").directive("tab",function(){return function(scope,element){element.bind("click",function(e){e.preventDefault(),angular.element(this).tab("show")})}}),angular.module("surfCaptain").directive("tooltip",function(){return function(scope,element){element.tooltip()}}),angular.module("surfCaptain").directive("appVersion",["version",function(version){return function(scope,element){element.text(version)}}]),angular.module("surfCaptain").filter("DeploymentTypeFilter",function(){return function(input){switch(input){case"TYPO3CMSDeploy":case"TYPO3\\CMS\\Deploy":return"Deployment";case"TYPO3CMSSync":case"TYPO3\\CMS\\Sync":return"Sync";default:return input}}}),angular.module("surfCaptain").filter("logCodeFilter",function(){return function(input){switch(input){case 3:case"3":return"error";case 4:case"4":return"warning";case 5:case"5":return"notice";case 6:case"6":return"info";case 7:case"7":return"debug";default:return input}}}),angular.module("surfCaptain").factory("DeploymentRepository",["$http","$q","$cacheFactory",function($http,$q,$cacheFactory){var deploymentRepository={},url="/api/deployment";return $cacheFactory("deploymentCache"),deploymentRepository.addDeployment=function(deployment){var deploymentContainer={configuration:{}},deferred=$q.defer();return deploymentContainer.configuration=deployment,$http({method:"POST",url:url,data:{deployment:deploymentContainer},headers:{"Content-Type":"application/json",Accept:"application/json"}}).success(deferred.resolve).error(deferred.reject),deferred.promise},deploymentRepository.getDeployments=function(){var deferred=$q.defer();return $http.get(url).success(deferred.resolve).error(deferred.reject),deferred.promise},deploymentRepository.getSingleDeployment=function(identifier){var deferred=$q.defer();return angular.isDefined($cacheFactory.get("deploymentCache").get(identifier))?(deferred.resolve({deployment:$cacheFactory.get("deploymentCache").get(identifier)}),deferred.promise):($http.get(url+"?deployment="+identifier).success(deferred.resolve).error(deferred.reject),deferred.promise)},deploymentRepository.cancelDeployment=function(deploymentId){var deferred=$q.defer();return $http({method:"PUT",url:url,data:{deployment:{__identity:deploymentId,status:"cancelled"}}}).success(deferred.resolve).error(deferred.reject),deferred.promise},{addDeployment:function(deployment){return deploymentRepository.addDeployment(deployment)},cancelDeployment:function(deploymentId){return deploymentRepository.cancelDeployment(deploymentId)},getAllDeployments:function(){return deploymentRepository.getDeployments()},getSingleDeployment:function(identifier){return deploymentRepository.getSingleDeployment(identifier)}}}]),angular.module("surfCaptain").factory("PresetRepository",["$http","$q",function($http,$q){function PresetRepositoryException(message){this.name="PresetRepositoryException",this.message=message}var presetRepository={},url="/api/preset";
return PresetRepositoryException.prototype=new Error,PresetRepositoryException.prototype.constructor=PresetRepositoryException,presetRepository.getFullPresetAsString=function(server){return angular.toJson(presetRepository.getFullPreset(server),!1)},presetRepository.getFullPreset=function(server){var container={applications:[]};return container.applications[0]=server,container},presetRepository.getKeyFromServerConfiguration=function(server){if(angular.isUndefined(server.nodes[0].name)){if(angular.isUndefined(server.applications[0].nodes[0].name))throw new PresetRepositoryException("PresetRepository.getKeyFromServerConfiguration failed. Server configuration contains no key.");return server.apllications[0].nodes[0].name}return server.nodes[0].name},presetRepository.getApplicationContainer=function(server){var applicationContainer={applications:[]};return applicationContainer.applications[0]=server,applicationContainer},presetRepository.getGlobalServers=function(){var deferred=$q.defer();return $http.get(url+"?globals=1").success(deferred.resolve).error(deferred.reject),deferred.promise},presetRepository.putServer=function(preset){return this.sendSinglePresetToApi(preset,"put")},presetRepository.postServer=function(preset){return this.sendSinglePresetToApi(preset,"post")},presetRepository.sendSinglePresetToApi=function(preset,method){var deferred=$q.defer();return $http({method:method,url:url,data:{key:this.getKeyFromServerConfiguration(preset),configuration:presetRepository.getFullPreset(preset)},headers:{Accept:"application/json"}}).success(deferred.resolve).error(deferred.reject),deferred.promise},presetRepository.deleteServer=function(server){var deferred=$q.defer();return $http.delete(url+"?key="+presetRepository.getKeyFromServerConfiguration(server.applications[0])).success(deferred.resolve).error(deferred.reject),deferred.promise},{getGlobalServers:function(){return presetRepository.getGlobalServers()},updateServer:function(server){return presetRepository.putServer(server)},addServer:function(server){return presetRepository.postServer(server)},deleteServer:function(server){return presetRepository.deleteServer(server)}}}]),angular.module("surfCaptain").factory("ProjectRepository",["$http","$q","$cacheFactory",function($http,$q,$cacheFactory){function ProjectRepositoryException(message){this.name="ProjectRepositoryException",this.message=message}var projectRepository={},url="/api/repository",projectCache=$cacheFactory("projectCache"),projectsCache=$cacheFactory("projectsCache"),repositoryCache=$cacheFactory("repositoryCache");return ProjectRepositoryException.prototype=new Error,ProjectRepositoryException.prototype.constructor=ProjectRepositoryException,projectRepository.populateSingleProjectCache=function(projects){var length=angular.isDefined(projects)?projects.length:0,i=0;if(length)for(i;length>i;i++)projectCache.put(projects[i].name,projects[i])},projectRepository.getProjects=function(){var deferred=$q.defer();return angular.isDefined(projectsCache.get("allProjects"))?(deferred.resolve(projectsCache.get("allProjects")),deferred.promise):($http.get(url,{cache:!0,headers:{Accept:"application/json"}}).success(function(data){deferred.resolve(data.repositories),projectsCache.put("allProjects",data.repositories),projectRepository.populateSingleProjectCache(data.repositories)}).error(deferred.reject),deferred.promise)},projectRepository.getProjectByName=function(name,projects){if(angular.isUndefined(projectCache.get(name))&&projectRepository.populateSingleProjectCache(projects),projectCache=$cacheFactory.get("projectCache"),angular.isUndefined(projectCache.get(name)))throw new ProjectRepositoryException("Could not find project");return projectCache.get(name)},projectRepository.getFullProjectByRepositoryUrl=function(repositoryUrl){var deferred=$q.defer();return angular.isDefined(repositoryCache.get(repositoryUrl))?(deferred.resolve(repositoryCache.get(repositoryUrl)),projectRepository.updateFullProjectInCache(repositoryUrl)):$http.get(url+"?repositoryUrl="+repositoryUrl).success(function(response){repositoryCache.put(repositoryUrl,response),deferred.resolve(response)}).error(deferred.reject),deferred.promise},projectRepository.getFullProjectByRepositoryUrlFromServer=function(repositoryUrl){var deferred=$q.defer();return $http.get(url+"?repositoryUrl="+repositoryUrl).success(function(response){repositoryCache.put(repositoryUrl,response),deferred.resolve(response)}).error(deferred.reject),deferred.promise},projectRepository.updateFullProjectInCache=function(repositoryUrl){$http.get(url+"?repositoryUrl="+repositoryUrl).success(function(response){repositoryCache.put(repositoryUrl,response)})},{getProjects:function(){return projectRepository.getProjects()},getProjectByName:function(name,projects){return projectRepository.getProjectByName(name,projects)},getFullProjectByRepositoryUrl:function(repositoryUrl){return projectRepository.getFullProjectByRepositoryUrl(repositoryUrl)},updateFullProjectInCache:function(repositoryUrl){projectRepository.updateFullProjectInCache(repositoryUrl)},getFullProjectByRepositoryUrlFromServer:function(repositoryUrl){return projectRepository.getFullProjectByRepositoryUrlFromServer(repositoryUrl)}}}]),angular.module("surfCaptain").factory("SettingsRepository",["$http","$q","$cacheFactory",function($http,$q,$cacheFactory){var settingsRepository={},url="/api/frontendSetting";return $cacheFactory("settingsCache"),settingsRepository.getFrontendSettings=function(){var deferred=$q.defer(),settingsCache=$cacheFactory.get("settingsCache");return angular.isDefined(settingsCache.get("configuration"))?(deferred.resolve(settingsCache.get("configuration")),deferred.promise):($http.get(url,{cache:!0}).success(function(data){settingsCache.put("configuration",data.frontendSettings),deferred.resolve(data.frontendSettings)}).error(deferred.reject),deferred.promise)},{getSettings:function(){return settingsRepository.getFrontendSettings()}}}]),angular.module("surfCaptain").service("FlashMessageService",function(){var messages=[];this.addFlashMessage=function(title,message,severity,id){return messages.push({title:title||"",message:message||"",severity:severity,time:new Date,id:id}),messages},this.getFlashMessages=function(){return messages},this.flush=function(){messages=[]}}),angular.module("surfCaptain").service("MarkerService",function(){var localStorage=[],clearLocalStorage=function(){localStorage=[]},addToLocalStorage=function(ind,marker){localStorage.push([ind,marker])},applyLocalStorage=function(string){var index,marker,length=localStorage.length,i=length-1;if(length)for(i;i>=0;i--)index=localStorage[i][0],marker=localStorage[i][1],string=string.slice(0,index)+marker+string.slice(index);return clearLocalStorage(),string};this.getFirstMarker=function(string){var marker;return"string"!=typeof string?null:(marker=string.match(new RegExp("([{]{2,2})([A-Za-z0-9]*)([}]{2,2})")),null===marker?null:marker[0])},this.replaceMarkers=function(string,configuration){var marker,replacement;if(angular.isUndefined(configuration))return string;switch(marker=this.getFirstMarker(string)){case null:return string=applyLocalStorage(string);case"{{project}}":case"{{projectName}}":case"{{projectname}}":angular.isDefined(configuration.name)?replacement=configuration.name:(addToLocalStorage(string.indexOf(marker),marker),replacement="");break;case"{{suffix}}":angular.isDefined(configuration.suffix)?replacement=configuration.suffix:(addToLocalStorage(string.indexOf(marker),marker),replacement="");break;default:addToLocalStorage(string.indexOf(marker),marker),replacement=""}return string=string.replace(marker,replacement),string=this.replaceMarkers(string,configuration)},this.getStringBeforeFirstMarker=function(string){var index;return"string"!=typeof string?"":(index=string.indexOf(this.getFirstMarker(string)),-1===index?string:string.substring(0,index))}}),angular.module("surfCaptain").service("PresetService",["SettingsRepository","ValidationService",function(SettingsRepository,ValidationService){var newPreset={options:{repositoryUrl:"",deploymentPath:"",context:""},nodes:[{name:"",hostname:"",username:""}]},self=this;this.contexts=[],this.setContexts=function(){0===self.contexts.length&&SettingsRepository.getSettings().then(function(response){self.contexts=[],angular.isDefined(response.contexts)&&(self.contexts=response.contexts.split(","))})},this.getNewPreset=function(configuration){var preset=angular.copy(newPreset);return angular.isDefined(configuration)&&(angular.isDefined(configuration.defaultUser)&&(preset.nodes[0].username=configuration.defaultUser),angular.isDefined(configuration.defaultDeploymentPath)&&(preset.options.deploymentPath=configuration.defaultDeploymentPath)),preset},this.getRootContext=function(context,contexts){this.setContexts();var i=0,length=contexts.length;for(i;length>i;i++)if(ValidationService.doesStringStartWithSubstring(context,contexts[i]))return contexts[i];return""}}]),angular.module("surfCaptain").service("UtilityService",function(){this.getDeployedTag=function(name,tags){var commit,length=tags.length,i=0;for(i;length>i;i++)tags[i].name==="server-"+name&&(commit=tags[i].commit);if(angular.isUndefined(commit))return"No deployed tag found.";for(i=0;length>i;i++)if(tags[i].commit.id===commit.id&&tags[i].name!=="server-"+name)return tags[i].type+" "+tags[i].name+" - "+commit.committerName+': "'+commit.message+'"';return commit.id+" - "+commit.committerName+': "'+commit.message+'"'}}),angular.module("surfCaptain").service("ValidationService",function(){this.hasLength=function(value,minLength,message){return value.length>=minLength?!0:message||!1},this.doesLastCharacterMatch=function(value,character,message){return value.charAt(value.length-1)===character?!0:message||!1},this.doesArrayContainItem=function(array,item,message){return array instanceof Array&&array.indexOf(item)>-1?!0:message||!1},this.doesStringContainSubstring=function(string,substring,message){return"string"==typeof string&&-1!==string.indexOf(substring)?!0:message||!1},this.doesStringStartWithSubstring=function(string,substring,message){return"string"==typeof string&&0===string.indexOf(substring)?!0:message||!1}});
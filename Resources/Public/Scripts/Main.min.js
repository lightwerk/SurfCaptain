"use strict";var surfCaptain=angular.module("surfCaptain",["ngRoute","xeditable","ngAnimate"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/Projects.html",controller:"ProjectsController"}).when("/project/:itemName",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/Project.html",controller:"ProjectController"}).when("/project/:itemName/deploy",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/Deploy.html",controller:"DeployController"}).when("/project/:itemName/sync",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/Sync.html",controller:"SyncController"}).when("/project/:itemName/server",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/Server.html",controller:"ServerController"}).when("/about",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/About.html",controller:"AboutController"}).otherwise({redirectTo:"/"})}]).value("version","0.5.7").value("domain","http://api.surfcaptain.local.loc/");surfCaptain.run(function(editableOptions){editableOptions.theme="bs3"}),surfCaptain.controller("AboutController",["$scope",function($scope){$scope.techs=[{name:"angular",url:"https://angularjs.org/",description:{headline:"AngularJS",span1:"JavaScript",span2:"Framework"}},{name:"flow",url:"http://flow.typo3.org/",description:{headline:"TYPO3 FLOW",span1:"PHP-Application",span2:"Framework"}},{name:"bootstrap",url:"http://getbootstrap.com/",description:{headline:"Bootstrap",span1:"CSS",span2:"Framework"}}],$scope.subtechs=[{name:"grunt",url:"http://gruntjs.com/",description:{headline:"Grunt"}},{name:"bower",url:"http://bower.io/",description:{headline:"Bower"}},{name:"composer",url:"https://getcomposer.org/",description:{headline:"Composer"}},{name:"karma",url:"http://karma-runner.github.io",description:{headline:"Karma"}},{name:"jasmine",url:"http://jasmine.github.io/",description:{headline:"Jasmine"}},{name:"jquery",url:"http://jquery.com/",description:{headline:"jQuery"}},{name:"css3",url:"http://en.wikipedia.org/wiki/Cascading_Style_Sheets#CSS_3",description:{headline:"CSS 3"}},{name:"git",url:"http://git-scm.com/",description:{headline:"git"}},{name:"html5",url:"http://en.wikipedia.org/wiki/HTML5",description:{headline:"HTML 5"}},{name:"mysql",url:"http://www.mysql.com/",description:{headline:"MySQL"}}]}]),surfCaptain.controller("AbstractSingleProjectController",["$scope","$routeParams","ProjectRepository",function($scope,$routeParams,ProjectRepository){$scope.name=$routeParams.itemName,$scope.project={},this.init=function(){ProjectRepository.getProjects().then(function(projects){$scope.project=ProjectRepository.getProjectByName(projects.projects,$scope.name)})},this.init()}]),surfCaptain.controller("DeployController",["$scope","$controller","GitRepository","ServerRepository","HistoryRepository",function($scope,$controller,GitRepository,ServerRepository,HistoryRepository){var loadingString="loading ...";angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope})),$scope.deployableCommits=[{name:loadingString,group:"Tags"},{name:loadingString,group:"Branches"}],$scope.tags=[],$scope.branches=[],$scope.unsetLoadingKeyForGroup=function(group){var key;for(key in $scope.deployableCommits)if($scope.deployableCommits.hasOwnProperty(key)&&void 0!==$scope.deployableCommits[key].name&&void 0!==$scope.deployableCommits[key].group&&$scope.deployableCommits[key].name===loadingString&&$scope.deployableCommits[key].group===group){$scope.deployableCommits.splice(key,1);break}},$scope.$watch("project",function(newValue){var id;void 0!==newValue&&void 0!==newValue.id&&(id=newValue.id,GitRepository.getTagsByProjectId(id.toString()).then(function(response){$scope.unsetLoadingKeyForGroup("Tags"),$scope.tags=response.tags,$scope.deployableCommits=jQuery.merge($scope.tags,$scope.deployableCommits)},function(){$scope.unsetLoadingKeyForGroup("Tags")}),GitRepository.getBranchesByProjectId(id.toString()).then(function(response){$scope.unsetLoadingKeyForGroup("Branches"),$scope.branches=response.branches,$scope.deployableCommits=jQuery.merge($scope.branches,$scope.deployableCommits)},function(){$scope.unsetLoadingKeyForGroup("Branches")}),ServerRepository.getServers().then(function(response){$scope.servers=response.filter(function(entry){return entry.project===newValue.id})}),HistoryRepository.getHistoryByProject($scope.project).then(function(response){$scope.history=response.filter(function(entry){return"Deploy"===entry.application})}))})}]),surfCaptain.controller("ProjectController",["$scope","$controller","HistoryRepository",function($scope,$controller,HistoryRepository){angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope})),$scope.ordering="date",$scope.constraint="",$scope.$watch("project",function(newValue){void 0!==newValue&&void 0!==newValue.name&&HistoryRepository.getHistoryByProject($scope.project).then(function(response){$scope.history=response})})}]),surfCaptain.controller("ProjectsController",["$scope","ProjectRepository",function($scope,ProjectRepository){$scope.ordering="name",$scope.projects=[],this.init=function(){ProjectRepository.getProjects().then(function(response){$scope.projects=response.projects},function(){})},this.init()}]),surfCaptain.controller("ServerController",["$scope","$controller","ServerRepository",function($scope,$controller,ServerRepository){angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope})),$scope.contexts=["Production","Development","Staging"],$scope.deleteServer=function(server){ServerRepository.deleteServer(server)},$scope.updateServer=function(server){ServerRepository.putServer(server)},$scope.updateHost=function(data){return data.length>0?!0:"Host must not be empty!"},$scope.updateDocumentRoot=function(data){return data.length>0?"/"===data.charAt(data.length-1)?!0:'DocRoot must end with "/"!':"DocRoot must not be empty!"},$scope.updateUsername=function(data){return data.length>0?!0:"User must not be empty!"},$scope.updateContext=function(data){return $scope.contexts.indexOf(data)>-1?!0:"Context is not valid!"},$scope.$watch("project",function(newValue){void 0!==newValue.name&&ServerRepository.getServers().then(function(response){$scope.servers=response.filter(function(entry){return entry.project===newValue.id}),$scope.serverNames=["bma-live","bma-qa"]})})}]),surfCaptain.controller("SyncController",["$scope","$controller",function($scope,$controller){angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope}))}]),surfCaptain.directive("chosen",function(){var linker=function(scope,element,attrs){var list=attrs.chosen;scope.$watch(list,function(){element.trigger("liszt:updated"),element.trigger("chosen:updated")}),element.chosen({search_contains:!0})};return{restrict:"A",link:linker}}),surfCaptain.directive("serverNameValidate",function(){return{restrict:"A",require:"ngModel",scope:{serverNames:"="},link:function(scope,elem,attr,ctrl){ctrl.$parsers.unshift(function(value){var valid=void 0===scope.serverNames||-1===scope.serverNames.indexOf(value);return ctrl.$setValidity("serverNameValidate",valid),valid?value:void 0}),ctrl.$formatters.unshift(function(value){var valid=void 0===scope.serverNames||-1===scope.serverNames.indexOf(value);return ctrl.$setValidity("serverNameValidate",valid),value})}}}),surfCaptain.directive("surfcaptainHeader",["$routeParams","$location",function($routeParams,$location){return{restrict:"E",templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Partials/Header.html",scope:{icon:"@icon"},link:function(scope){var lastUrlPart=$location.path().split("/").pop();scope.project=$routeParams.itemName,scope.context=lastUrlPart===scope.project?"":lastUrlPart}}}]),surfCaptain.directive("surfcaptainMenu",["$routeParams","$location",function($routeParams,$location){return{restrict:"E",templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Partials/Menu.html",scope:!0,link:function(scope){var lastUrlPart=$location.path().split("/").pop();scope.project=$routeParams.itemName,scope.context=lastUrlPart===scope.project?"history":lastUrlPart}}}]),surfCaptain.directive("tooltip",function(){return function(scope,element){element.tooltip()}}),surfCaptain.directive("appVersion",["version",function(version){return function(scope,element){element.text(version)}}]),surfCaptain.factory("GitRepository",["$http","$q",function($http,$q){var gitRepository={},tagUrl="/api/tags?projectId=",branchUrl="/api/branches?projectId=";return gitRepository.getTagsByProjectId=function(projectId){var deferred=$q.defer();return $http.get(tagUrl+projectId).success(deferred.resolve).error(deferred.reject),deferred.promise},gitRepository.getBranchesByProjectId=function(projectId){var deferred=$q.defer();return $http.get(branchUrl+projectId).success(deferred.resolve).error(deferred.reject),deferred.promise},gitRepository}]),surfCaptain.factory("HistoryRepository",["$http","$q",function($http,$q){var historyRepository={},url="/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/ExampleData/history.json";return historyRepository.getHistoryByProject=function(){var deferred=$q.defer();return $http.get(url).success(deferred.resolve).error(deferred.reject),deferred.promise},historyRepository}]),surfCaptain.factory("ProjectRepository",["$http","$q",function($http,$q){var projectRepository={},url="/api/projects";return projectRepository.getProjects=function(){var deferred=$q.defer();return $http.get(url,{cache:!0}).success(deferred.resolve).error(deferred.reject),deferred.promise},projectRepository.getProjectByName=function(projects,name){var length=projects.length,i=0;if(length)for(i;length>i;i++)if(projects[i].name===name)return projects[i]},projectRepository}]),surfCaptain.factory("ServerRepository",["$http","$q",function($http,$q){var serverRepository={},url="/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/ExampleData/servers.json";return serverRepository.getServers=function(){var deferred=$q.defer();return $http.get(url).success(deferred.resolve).error(deferred.reject),deferred.promise},serverRepository.putServer=function(server){console.log(server)},serverRepository.deleteServer=function(server){console.log(server)},serverRepository}]);
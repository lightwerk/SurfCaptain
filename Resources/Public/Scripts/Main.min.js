"use strict";var surfCaptain=angular.module("surfCaptain",["ngRoute","xeditable","ngAnimate","ngMessages"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/Projects.html",controller:"ProjectsController"}).when("/project/:projectName",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/Project.html",controller:"ProjectController"}).when("/project/:projectName/deploy",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/Deploy.html",controller:"DeployController"}).when("/project/:projectName/sync",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/Sync.html",controller:"SyncController"}).when("/project/:projectName/server",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/Server.html",controller:"ServerController"}).when("/about",{templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Templates/About.html",controller:"AboutController"}).otherwise({redirectTo:"/"})}]).value("version","0.7.0");surfCaptain.run(["editableOptions",function(editableOptions){editableOptions.theme="bs3"}]),surfCaptain.controller("AboutController",["$scope",function($scope){$scope.techs=[{name:"angular",url:"https://angularjs.org/",description:{headline:"AngularJS",span1:"JavaScript",span2:"Framework"}},{name:"flow",url:"http://flow.typo3.org/",description:{headline:"TYPO3 FLOW",span1:"PHP-Application",span2:"Framework"}},{name:"bootstrap",url:"http://getbootstrap.com/",description:{headline:"Bootstrap",span1:"CSS",span2:"Framework"}}],$scope.subtechs=[{name:"grunt",url:"http://gruntjs.com/",description:{headline:"Grunt"}},{name:"bower",url:"http://bower.io/",description:{headline:"Bower"}},{name:"composer",url:"https://getcomposer.org/",description:{headline:"Composer"}},{name:"karma",url:"http://karma-runner.github.io",description:{headline:"Karma"}},{name:"jasmine",url:"http://jasmine.github.io/",description:{headline:"Jasmine"}},{name:"jquery",url:"http://jquery.com/",description:{headline:"jQuery"}},{name:"css3",url:"http://en.wikipedia.org/wiki/Cascading_Style_Sheets#CSS_3",description:{headline:"CSS 3"}},{name:"git",url:"http://git-scm.com/",description:{headline:"git"}},{name:"html5",url:"http://en.wikipedia.org/wiki/HTML5",description:{headline:"HTML 5"}},{name:"mysql",url:"http://www.mysql.com/",description:{headline:"MySQL"}}]}]),surfCaptain.controller("AbstractSingleProjectController",["$scope","$routeParams","ProjectRepository",function($scope,$routeParams,ProjectRepository){$scope.name=$routeParams.projectName,$scope.project={},this.init=function(){ProjectRepository.getProjects().then(function(projects){$scope.project=ProjectRepository.getProjectByName(projects.repositories,$scope.name)})},this.init()}]),surfCaptain.controller("DeployController",["$scope","$controller","GitRepository","ServerRepository","HistoryRepository",function($scope,$controller,GitRepository,ServerRepository,HistoryRepository){var loadingString="loading ...";angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope})),$scope.deployableCommits=[{name:loadingString,group:"Tags"},{name:loadingString,group:"Branches"}],$scope.tags=[],$scope.branches=[],$scope.unsetLoadingKeyForGroup=function(group){var key;for(key in $scope.deployableCommits)if($scope.deployableCommits.hasOwnProperty(key)&&void 0!==$scope.deployableCommits[key].name&&void 0!==$scope.deployableCommits[key].group&&$scope.deployableCommits[key].name===loadingString&&$scope.deployableCommits[key].group===group){$scope.deployableCommits.splice(key,1);break}},$scope.$watch("project",function(newValue){var id;void 0!==newValue&&void 0!==newValue.id&&(id=newValue.id,GitRepository.getTagsByProjectId(id.toString()).then(function(response){$scope.unsetLoadingKeyForGroup("Tags"),$scope.tags=response.tags,$scope.deployableCommits=jQuery.merge($scope.tags,$scope.deployableCommits)},function(){$scope.unsetLoadingKeyForGroup("Tags")}),GitRepository.getBranchesByProjectId(id.toString()).then(function(response){$scope.unsetLoadingKeyForGroup("Branches"),$scope.branches=response.branches,$scope.deployableCommits=jQuery.merge($scope.branches,$scope.deployableCommits)},function(){$scope.unsetLoadingKeyForGroup("Branches")}),ServerRepository.getServers().then(function(response){$scope.servers=response.filter(function(entry){return entry.project===newValue.id})}),HistoryRepository.getHistoryByProject($scope.project).then(function(response){$scope.history=response.filter(function(entry){return"Deploy"===entry.application})}))})}]),surfCaptain.controller("ProjectController",["$scope","$controller","HistoryRepository",function($scope,$controller,HistoryRepository){angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope})),$scope.ordering="date",$scope.constraint="dummy",$scope.$watch("project",function(newValue){void 0!==newValue&&void 0!==newValue.name&&HistoryRepository.getHistoryByProject($scope.project).then(function(response){$scope.history=response})})}]),surfCaptain.controller("ProjectsController",["$scope","ProjectRepository","SettingsRepository",function($scope,ProjectRepository,SettingsRepository){$scope.settings={},$scope.ordering="name",$scope.projects=[],this.init=function(){ProjectRepository.getProjects().then(function(response){$scope.projects=response.repositories},function(){$scope.message="API call failed. GitLab is currently not available."}),SettingsRepository.getSettings().then(function(response){$scope.settings=response})},this.init()}]),surfCaptain.controller("ServerController",["$scope","$controller","ServerRepository","ValidationService","SettingsRepository","MarkerService",function($scope,$controller,ServerRepository,ValidationService,SettingsRepository,MarkerService){var getAllServers,setTakenServerNamesAsUnavailableSuggestions,getNewPreset,handleSettings,generateNameSuggestions;$scope.currentPreset={},$scope.defaultUser="",$scope.defaultDocumentRoot="",$scope.contexts=["Production","Development","Staging"],getNewPreset=function(){return{options:{repositoryUrl:"",documentRoot:$scope.defaultDocumentRoot,context:""},nodes:[{name:"",hostname:"",username:$scope.defaultUser}]}},$scope.newPreset=getNewPreset(),setTakenServerNamesAsUnavailableSuggestions=function(){var numberOfNameSuggestions,serverName,property,i=0,serverNames=[];for(property in $scope.servers)$scope.servers.hasOwnProperty(property)&&serverNames.push(property);if(serverNames.length)for(numberOfNameSuggestions=$scope.nameSuggestions.length,i;numberOfNameSuggestions>i;i++)serverName=$scope.generateServerName($scope.nameSuggestions[i].suffix),$scope.nameSuggestions[i].available=!ValidationService.doesArrayContainsItem(serverNames,serverName)},getAllServers=function(){$scope.newPreset.options.repositoryUrl=$scope.project.ssh_url_to_repo,ServerRepository.getServers($scope.project.ssh_url_to_repo).then(function(response){$scope.servers=response.presets,angular.isDefined($scope.nameSuggestions)&&setTakenServerNamesAsUnavailableSuggestions()})},handleSettings=function(){var docRoot;angular.isDefined($scope.settings.nameSuggestions)&&generateNameSuggestions($scope.settings.nameSuggestions),angular.isDefined($scope.settings.defaultUser)&&($scope.defaultUser=$scope.settings.defaultUser,$scope.newPreset.nodes[0].username=$scope.defaultUser),angular.isDefined($scope.settings.defaultDocumentRoot)&&(docRoot=$scope.settings.defaultDocumentRoot,-1!==docRoot.indexOf("{{")&&(docRoot=MarkerService.replaceMarkers(docRoot,$scope.project)),$scope.defaultDocumentRoot=docRoot,$scope.newPreset.options.documentRoot=docRoot)},generateNameSuggestions=function(nameSuggestions){var nameSuggestion,item;$scope.nameSuggestions=[];for(nameSuggestion in nameSuggestions)nameSuggestions.hasOwnProperty(nameSuggestion)&&(item={suffix:nameSuggestion,available:!0,context:nameSuggestions[nameSuggestion]},$scope.nameSuggestions.push(item))},angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope})),$scope.setCurrentPreset=function(preset){$scope.currentPreset=preset},$scope.deleteServer=function(server){ServerRepository.deleteServer(server).then(function(){getAllServers()},function(){})},$scope.updateServer=function(server){ServerRepository.updateServer(server)},$scope.addServer=function(server){ServerRepository.addServer(server).then(function(){$scope.newPreset=getNewPreset(),$scope.newServerForm.$setPristine(),getAllServers()},function(){})},$scope.updateHost=function(data){return ValidationService.hasLength(data,1,"Host must not be empty!")},$scope.updateDocumentRoot=function(data){var res=ValidationService.hasLength(data,1,"DocumentRoot is required!");return res===!0?ValidationService.doesLastCharacterMatch(data,"/",'DocumentRoot must end with "/"!'):res},$scope.updateUsername=function(data){return ValidationService.hasLength(data,1,"User must not be empty!")},$scope.updateContext=function(data){return ValidationService.doesArrayContainsItem($scope.contexts,data,"Context is not valid!")},$scope.generateServerName=function(suffix){return $scope.project.name+"-"+suffix},$scope.$watch("project",function(newValue){angular.isDefined(newValue.name)&&SettingsRepository.getSettings().then(function(response){$scope.settings=response.frontendSettings,handleSettings(),getAllServers()},function(){getAllServers()})})}]),surfCaptain.controller("SyncController",["$scope","$controller",function($scope,$controller){angular.extend(this,$controller("AbstractSingleProjectController",{$scope:$scope}))}]),surfCaptain.directive("chosen",function(){var linker=function(scope,element,attrs){var list=attrs.chosen;scope.$watch(list,function(){element.trigger("liszt:updated"),element.trigger("chosen:updated")}),element.chosen({search_contains:!0})};return{restrict:"A",link:linker}}),surfCaptain.directive("lastCharacterValidate",["ValidationService",function(ValidationService){return{restrict:"A",require:"ngModel",scope:{character:"@character"},link:function(scope,elem,attr,ctrl){var character=scope.character||"";ctrl.$parsers.unshift(function(value){var valid=value?ValidationService.doesLastCharacterMatch(value.slice(-1),character):!1;return ctrl.$setValidity("last-character-validate",valid),valid?value:void 0}),ctrl.$formatters.unshift(function(value){var valid=value?ValidationService.doesLastCharacterMatch(value.slice(-1),character):!1;return ctrl.$setValidity("last-character-validate",valid),value})}}}]),surfCaptain.directive("modal",function(){return{scope:{modal:"@modal"},link:function(scope,element){element.bind("click",function(){angular.element("."+scope.modal).modal()})}}}),surfCaptain.directive("serverNameValidate",function(){return{restrict:"A",require:"ngModel",scope:{serverNames:"="},link:function(scope,elem,attr,ctrl){ctrl.$parsers.unshift(function(value){var valid=void 0===scope.serverNames||-1===scope.serverNames.indexOf(value);return ctrl.$setValidity("serverNameValidate",valid),valid?value:void 0}),ctrl.$formatters.unshift(function(value){var valid=void 0===scope.serverNames||-1===scope.serverNames.indexOf(value);return ctrl.$setValidity("serverNameValidate",valid),value})}}}),surfCaptain.directive("surfcaptainHeader",["$routeParams","$location",function($routeParams,$location){return{restrict:"E",templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Partials/Header.html",scope:{icon:"@icon"},link:function(scope){var lastUrlPart=$location.path().split("/").pop();scope.project=$routeParams.itemName,scope.context=lastUrlPart===scope.project?"":lastUrlPart}}}]),surfCaptain.directive("surfcaptainMenu",["$routeParams","$location",function($routeParams,$location){return{restrict:"E",templateUrl:"/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/Partials/Menu.html",scope:{},link:function(scope){var lastUrlPart=$location.path().split("/").pop();scope.project=$routeParams.projectName,scope.context=lastUrlPart===scope.project?"history":lastUrlPart}}}]),surfCaptain.directive("tooltip",function(){return function(scope,element){element.tooltip()}}),surfCaptain.directive("appVersion",["version",function(version){return function(scope,element){element.text(version)}}]),surfCaptain.factory("GitRepository",["$http","$q",function($http,$q){var gitRepository={},tagUrl="/api/tags?projectId=",branchUrl="/api/branches?projectId=";return gitRepository.getTagsByProjectId=function(projectId){var deferred=$q.defer();return $http.get(tagUrl+projectId).success(deferred.resolve).error(deferred.reject),deferred.promise},gitRepository.getBranchesByProjectId=function(projectId){var deferred=$q.defer();return $http.get(branchUrl+projectId).success(deferred.resolve).error(deferred.reject),deferred.promise},gitRepository}]),surfCaptain.factory("HistoryRepository",["$http","$q",function($http,$q){var historyRepository={},url="/_Resources/Static/Packages/Lightwerk.SurfCaptain/Scripts/SurfCaptainApp/ExampleData/history.json";return historyRepository.getHistoryByProject=function(){var deferred=$q.defer();return $http.get(url).success(deferred.resolve).error(deferred.reject),deferred.promise},historyRepository}]),surfCaptain.factory("ProjectRepository",["$http","$q",function($http,$q){var projectRepository={},url="/api/repository";return projectRepository.getProjects=function(){var deferred=$q.defer();return $http.get(url,{cache:!0,headers:{Accept:"application/json"}}).success(deferred.resolve).error(deferred.reject),deferred.promise},projectRepository.getProjectByName=function(projects,name){var length=projects.length,i=0;if(length)for(i;length>i;i++)if(projects[i].name===name)return projects[i]},projectRepository}]),surfCaptain.factory("ServerRepository",["$http","$q",function($http,$q){var serverRepository={},url="/api/presets";return serverRepository.getFullPresetAsString=function(server){var container={applications:[]};return container.applications[0]=server,console.log(container),JSON.stringify(container)},serverRepository.getKeyFromServerConfiguration=function(server){return server.nodes[0].name},serverRepository.getApplicationContainer=function(server){var applicationContainer={applications:[]};return applicationContainer.applications[0]=server,applicationContainer},serverRepository.getServers=function(repositoryUrl){var deferred=$q.defer();return $http.get(url+"?repositoryUrl="+repositoryUrl).success(deferred.resolve).error(deferred.reject),deferred.promise},serverRepository.putServer=function(server){console.log(server)},serverRepository.postServer=function(server){var deferred=$q.defer(),configuration=this.getFullPresetAsString(server);return $http({method:"POST",url:url+"?key="+this.getKeyFromServerConfiguration(server)+"&configuration="+configuration,headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(deferred.resolve).error(deferred.reject),deferred.promise},serverRepository.deleteServer=function(server){var deferred=$q.defer();return $http.delete(url+"?key="+serverRepository.getKeyFromServerConfiguration(server.applications[0])).success(deferred.resolve).error(deferred.reject),deferred.promise},{getServers:function(repositoryUrl){return serverRepository.getServers(repositoryUrl)},updateServer:function(server){return serverRepository.putServer(server)},addServer:function(server){return serverRepository.postServer(server)},deleteServer:function(server){return serverRepository.deleteServer(server)}}}]),surfCaptain.factory("SettingsRepository",["$http","$q",function($http,$q){var settingsRepository={},url="/api/frontendSetting";return settingsRepository.getFrontendSettings=function(){var deferred=$q.defer();return $http.get(url,{cache:!0}).success(deferred.resolve).error(deferred.reject),deferred.promise},{getSettings:function(){return settingsRepository.getFrontendSettings()}}}]),surfCaptain.service("MarkerService",function(){var replaceMarkers=function(string,project){var marker=string.match(new RegExp("([{]{2,2})([A-Za-z0-9]*)([}]{2,2})"));switch(marker[0]){case"{{project}}":case"{{projectName}}":case"{{projectname}}":string=string.replace(marker[0],project.name),string=replaceMarkers(string,project)}return string};this.replaceMarkers=replaceMarkers}),surfCaptain.service("ValidationService",function(){this.hasLength=function(value,minLength,message){return value.length>=minLength?!0:message||!1},this.doesLastCharacterMatch=function(value,character,message){return value.charAt(value.length-1)===character?!0:message||!1},this.doesArrayContainsItem=function(array,item,message){return array instanceof Array&&array.indexOf(item)>-1?!0:message||!1}});